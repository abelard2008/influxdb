import { SymbolType } from '../utils/getSymbolScale';
export declare type NumericColumnData = number[] | Int8Array | Int16Array | Int32Array | Uint8Array | Uint16Array | Uint32Array | Float32Array | Float64Array;
export declare type ColumnData = number[] | string[] | boolean[];
export declare type ColumnType = 'number' | 'string' | 'time' | 'boolean';
export interface GetColumn {
    (columnKey: string): ColumnData;
    (columnKey: string, type: 'number'): number[];
    (columnKey: string, type: 'time'): number[];
    (columnKey: string, type: 'string'): string[];
    (columnKey: string, type: 'boolean'): boolean[];
}
export interface Table {
    getColumn: GetColumn;
    getColumnName: (columnKey: string) => string;
    getColumnType: (columnKey: string) => ColumnType;
    columnKeys: string[];
    length: number;
    addColumn: (columnKey: string, type: ColumnType, data: ColumnData, name?: string) => Table;
}
export interface Scale<D = any, R = any> {
    (x: D): R;
    invert?: (y: R) => D;
}
export interface Margins {
    top: number;
    right: number;
    bottom: number;
    left: number;
}
export interface TooltipColumn {
    key: string;
    name: string;
    type: ColumnType;
    values: string[];
    colors: string[] | null;
}
export declare type TooltipData = TooltipColumn[];
export declare type LineInterpolation = 'linear' | 'monotoneX' | 'monotoneY' | 'cubic' | 'step' | 'stepBefore' | 'stepAfter' | 'natural';
export declare type LineHoverDimension = 'x' | 'y' | 'xy';
export interface LineLayerConfig {
    type: 'line';
    x: string;
    y: string;
    fill?: string[];
    colors?: string[];
    interpolation?: LineInterpolation;
    hoverDimension?: LineHoverDimension | 'auto';
    lineWidth?: number;
    maxTooltipRows?: number;
}
export interface LineMappings {
    x: string;
    y: string;
    fill: string[];
}
export interface LineScales {
    fill: Scale<string, string>;
}
export interface HeatmapLayerConfig {
    type: 'heatmap';
    x: string;
    y: string;
    colors?: string[];
    binSize?: number;
}
export interface HeatmapScales {
    fill: Scale<number, string>;
}
export interface HeatmapMappings {
    xMin: 'xMin';
    xMax: 'xMax';
    yMin: 'yMin';
    yMax: 'yMax';
    fill: 'count';
}
export interface HistogramMappings {
    xMin: 'xMin';
    xMax: 'xMax';
    yMin: 'yMin';
    yMax: 'yMax';
    fill: string[];
}
export interface HistogramScales {
    fill: Scale<string, string>;
}
export interface ScatterLayerConfig {
    type: 'scatter';
    x: string;
    y: string;
    colors?: string[];
    fill?: string[];
    symbol?: string[];
}
export interface ScatterMappings {
    x: string;
    y: string;
    fill: string[];
    symbol: string[];
}
export interface ScatterScales {
    fill: Scale<string, string>;
    symbol: Scale<string, SymbolType>;
}
export declare type Mappings = LineMappings | HistogramMappings | HeatmapMappings | ScatterMappings;
export declare type Scales = LineScales | HistogramScales | HeatmapScales | ScatterScales;
export declare type LayerConfig = LineLayerConfig | HistogramLayerConfig | HeatmapLayerConfig | ScatterLayerConfig;
export declare type HistogramPosition = 'overlaid' | 'stacked';
export interface HistogramLayerConfig {
    type: 'histogram';
    x: string;
    fill?: string[];
    colors?: string[];
    position?: HistogramPosition;
    binCount?: number;
}
export interface Config {
    table: Table;
    layers: LayerConfig[];
    width?: number;
    height?: number;
    xAxisLabel?: string;
    yAxisLabel?: string;
    xDomain?: number[];
    onSetXDomain?: (xDomain: number[]) => void;
    onResetXDomain?: () => void;
    yDomain?: number[];
    onSetYDomain?: (yDomain: number[]) => void;
    onResetYDomain?: () => void;
    valueFormatters?: {
        [colKey: string]: (value: any) => string;
    };
    showAxes?: boolean;
    axisColor?: string;
    axisOpacity?: number;
    gridColor?: string;
    gridOpacity?: number;
    tickFont?: string;
    tickFontColor?: string;
    legendFont?: string;
    legendFontColor?: string;
    legendFontBrightColor?: string;
    legendBackgroundColor?: string;
    legendBorder?: string;
    legendCrosshairColor?: string;
    legendColumns?: string[];
}
export declare type SizedConfig = Config & {
    width: number;
    height: number;
};
